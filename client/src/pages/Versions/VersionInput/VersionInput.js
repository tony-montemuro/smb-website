/* ===== IMPORTS ===== */
import { MessageContext } from "../../../utils/Contexts";
import { useContext, useState } from "react";
import ValidationHelper from "../../../helper/ValidationHelper";

const VersionInput = (versions, currentVersion, updateVersions, addBtnSubmit, sequence) => {
    /* ===== VARIABLES ===== */
    const versionInit = {
        value: currentVersion ?? "",
        error: undefined
    };
    const newVersion = addBtnSubmit ? true : false;

    /* ===== CONTEXTS ===== */

    // add message function from message context
    const { addMessage } = useContext(MessageContext);

    /* ===== STATES ===== */
    const [version, setVersion] = useState(versionInit);

    /* ===== FUNCTIONS ===== */

    // helper functions
    const { validateVersion } = ValidationHelper();

    // FUNCTION 1: onChange - code that is executed each time the user changes a version input
    // PRECONDITIONS (1 parameter):
    // 1.) e: the event object generated by the change event on the version input
    // POSTCONDITIONS (1 possible outcome):
    // the version state is updated with the new value, and the error state is reset
    const onChange = e => {
        setVersion({
            value: e.target.value,
            error: versionInit.error
        });
    };

    // FUNCTION 2: onBlur - code that is executed when a "blur" event occurs on the version input
    // 1.) e: the event object generated by the change event on the version input
    // POSTCONDITIONS (2 possible outcome):
    // if the version is validated, this function does nothing, UNLESS `updateVersions` is defined
    // if the version is not validated, this function will let the user know, and update the `error` field to display the error
    const onBlur = e => {
        const input = e.target.value;

        // special case: if this is a new version input, and the input is blank, skip validation. otherwise, always validate
        let error;
        if (newVersion && input === "") {
            error = undefined;
        } else {
            error = validateVersion(input, versions, sequence);
        }

        if (error) {
            addMessage("There was a problem updating this version.", "error", 6000);
            setVersion({ ...version, error });
            return;
        }

        // if `updateVersions` function is defined, let's update the versions "global" state. otherwise, let's reset `version`
        // state
        if (updateVersions) {
            updateVersions(e);
        }
    };

    // FUNCTION 3: onSubmit - code that is executed when the user hits the `Add Version` button
    // PRECONDITIONS: NONE
    // POSTCONDITIONS (2 possible outcomes):
    // if `addBtnSubmit` function returns true, we reset the `version` state
    // otherwise, this function does nothing
    const onSubmit = () => {
        const error = addBtnSubmit(version.value);

        if (!error) {
            setVersion(versionInit);
        } else {
            setVersion({ ...version, error });
        }
    }

    return { version, onChange, onBlur, onSubmit };
};

/* ===== EXPORTS ===== */
export default VersionInput;